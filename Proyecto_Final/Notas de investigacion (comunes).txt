- hay mucho recall en general pone todos como normales

- el capture rate sube la precision (dependiendo del random) del 91 al 98. El capture rate parece ser una caracteristica que separa mucho en caso de descubridor de legendarios

- hemos probado la red neuronal solo con el capture rate y sale una precision constante de 97.2534332084894%. Pensamos que puede estar bien estudiarlo a parte. Hacer true escore de capture rate solo y de con todos los datos para comparar.

- hay que repetir el proceso varias veces para sacar el minimo real, estamos cayendo en minimos locales

// 04-01-2020
- utilizando (por orden) grupos de train, validation y testing:
	-con grupo de testing con todos los datos con lambda 1:
		-precision: 0.9692307692307692
		-recall: 0.9
		-score: 0.9333333333333333
	-con grupo de testing de los no utilizados con lambda 1:
		-precision: 0.8235294117647058
		-recall: 0.7777777777777778
		-score: 0.7999999999999999
	con estos grupos se cae en minimos locales y habra que coger ejemplos random o repitiendo el proceso y 	quedarnos con el mejor score

// 07-01-2020
-Haciendo shuffle de los grupos (testing, val, train), asi como cogiendo pokemons aleatorios en cada uno, el true score ha subido al 0.9142857142857143, pero se sigue
cayendo en minimos locales (yuju) que dan 0 en true positive (clasifican bien a los pokemons normales)
-Habiendo hecho el bucle de repeticion para tratar de sortear los minimos locales, hemos conseguido un true score de 0.8823529411764706 / 0.94 / 1.0 (o_O) con 
["attack", "defense", "hp", "sp_attack", "sp_defense", "speed", "capture_rate", "base_egg_steps"] y lambda 1
-Con capture rate y base egg steps sale un score muy alto (0.973) y lambda 1

// 11-01-2020
-Normalizando los atributos el true score ha pasado a 0.875 (con num_tries)

-los minimos locales parecen haberse reducido 

// 12-01-2020
-pintando cosas con keras
